/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const FUND_REWARDS_DISCRIMINATOR = 6;

export function getFundRewardsDiscriminatorBytes() {
  return getU8Encoder().encode(FUND_REWARDS_DISCRIMINATOR);
}

export type FundRewardsInstruction<
  TProgram extends string = typeof STAKE_POOL_PROGRAM_ADDRESS,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountFunder extends string | AccountMeta<string> = string,
  TAccountFunderTokenAccount extends string | AccountMeta<string> = string,
  TAccountRewardVault extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountFunder extends string
        ? ReadonlySignerAccount<TAccountFunder> &
            AccountSignerMeta<TAccountFunder>
        : TAccountFunder,
      TAccountFunderTokenAccount extends string
        ? WritableAccount<TAccountFunderTokenAccount>
        : TAccountFunderTokenAccount,
      TAccountRewardVault extends string
        ? WritableAccount<TAccountRewardVault>
        : TAccountRewardVault,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type FundRewardsInstructionData = {
  discriminator: number;
  amount: bigint;
};

export type FundRewardsInstructionDataArgs = { amount: number | bigint };

export function getFundRewardsInstructionDataEncoder(): FixedSizeEncoder<FundRewardsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: FUND_REWARDS_DISCRIMINATOR })
  );
}

export function getFundRewardsInstructionDataDecoder(): FixedSizeDecoder<FundRewardsInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['amount', getU64Decoder()],
  ]);
}

export function getFundRewardsInstructionDataCodec(): FixedSizeCodec<
  FundRewardsInstructionDataArgs,
  FundRewardsInstructionData
> {
  return combineCodec(
    getFundRewardsInstructionDataEncoder(),
    getFundRewardsInstructionDataDecoder()
  );
}

export type FundRewardsInput<
  TAccountPool extends string = string,
  TAccountFunder extends string = string,
  TAccountFunderTokenAccount extends string = string,
  TAccountRewardVault extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** The stake pool */
  pool: Address<TAccountPool>;
  /** The account funding rewards */
  funder: TransactionSigner<TAccountFunder>;
  /** Funder's reward token account */
  funderTokenAccount: Address<TAccountFunderTokenAccount>;
  /** Pool's reward vault */
  rewardVault: Address<TAccountRewardVault>;
  /** The token program */
  tokenProgram?: Address<TAccountTokenProgram>;
  amount: FundRewardsInstructionDataArgs['amount'];
};

export function getFundRewardsInstruction<
  TAccountPool extends string,
  TAccountFunder extends string,
  TAccountFunderTokenAccount extends string,
  TAccountRewardVault extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: FundRewardsInput<
    TAccountPool,
    TAccountFunder,
    TAccountFunderTokenAccount,
    TAccountRewardVault,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): FundRewardsInstruction<
  TProgramAddress,
  TAccountPool,
  TAccountFunder,
  TAccountFunderTokenAccount,
  TAccountRewardVault,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: true },
    funder: { value: input.funder ?? null, isWritable: false },
    funderTokenAccount: {
      value: input.funderTokenAccount ?? null,
      isWritable: true,
    },
    rewardVault: { value: input.rewardVault ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.funderTokenAccount),
      getAccountMeta(accounts.rewardVault),
      getAccountMeta(accounts.tokenProgram),
    ],
    data: getFundRewardsInstructionDataEncoder().encode(
      args as FundRewardsInstructionDataArgs
    ),
    programAddress,
  } as FundRewardsInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountFunder,
    TAccountFunderTokenAccount,
    TAccountRewardVault,
    TAccountTokenProgram
  >);
}

export type ParsedFundRewardsInstruction<
  TProgram extends string = typeof STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The stake pool */
    pool: TAccountMetas[0];
    /** The account funding rewards */
    funder: TAccountMetas[1];
    /** Funder's reward token account */
    funderTokenAccount: TAccountMetas[2];
    /** Pool's reward vault */
    rewardVault: TAccountMetas[3];
    /** The token program */
    tokenProgram: TAccountMetas[4];
  };
  data: FundRewardsInstructionData;
};

export function parseFundRewardsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedFundRewardsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pool: getNextAccount(),
      funder: getNextAccount(),
      funderTokenAccount: getNextAccount(),
      rewardVault: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getFundRewardsInstructionDataDecoder().decode(instruction.data),
  };
}
