/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UNSTAKE_DISCRIMINATOR = 3;

export function getUnstakeDiscriminatorBytes() {
  return getU8Encoder().encode(UNSTAKE_DISCRIMINATOR);
}

export type UnstakeInstruction<
  TProgram extends string = typeof STAKE_POOL_PROGRAM_ADDRESS,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountStakeAccount extends string | AccountMeta<string> = string,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountUserTokenAccount extends string | AccountMeta<string> = string,
  TAccountStakeVault extends string | AccountMeta<string> = string,
  TAccountStakeMint extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountClock extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountStakeAccount extends string
        ? WritableAccount<TAccountStakeAccount>
        : TAccountStakeAccount,
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountUserTokenAccount extends string
        ? WritableAccount<TAccountUserTokenAccount>
        : TAccountUserTokenAccount,
      TAccountStakeVault extends string
        ? WritableAccount<TAccountStakeVault>
        : TAccountStakeVault,
      TAccountStakeMint extends string
        ? ReadonlyAccount<TAccountStakeMint>
        : TAccountStakeMint,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export type UnstakeInstructionData = {
  discriminator: number;
  amount: bigint;
  expectedRewardRate: Option<bigint>;
};

export type UnstakeInstructionDataArgs = {
  amount: number | bigint;
  expectedRewardRate: OptionOrNullable<number | bigint>;
};

export function getUnstakeInstructionDataEncoder(): Encoder<UnstakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['amount', getU64Encoder()],
      ['expectedRewardRate', getOptionEncoder(getU64Encoder())],
    ]),
    (value) => ({ ...value, discriminator: UNSTAKE_DISCRIMINATOR })
  );
}

export function getUnstakeInstructionDataDecoder(): Decoder<UnstakeInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['amount', getU64Decoder()],
    ['expectedRewardRate', getOptionDecoder(getU64Decoder())],
  ]);
}

export function getUnstakeInstructionDataCodec(): Codec<
  UnstakeInstructionDataArgs,
  UnstakeInstructionData
> {
  return combineCodec(
    getUnstakeInstructionDataEncoder(),
    getUnstakeInstructionDataDecoder()
  );
}

export type UnstakeInput<
  TAccountPool extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountOwner extends string = string,
  TAccountUserTokenAccount extends string = string,
  TAccountStakeVault extends string = string,
  TAccountStakeMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountClock extends string = string,
> = {
  /** The stake pool */
  pool: Address<TAccountPool>;
  /** The user's stake account */
  stakeAccount: Address<TAccountStakeAccount>;
  /** The stake account owner */
  owner: TransactionSigner<TAccountOwner>;
  /** User's token account */
  userTokenAccount: Address<TAccountUserTokenAccount>;
  /** Pool's stake vault */
  stakeVault: Address<TAccountStakeVault>;
  /** The token mint being staked */
  stakeMint: Address<TAccountStakeMint>;
  /** The token program */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Clock sysvar */
  clock: Address<TAccountClock>;
  amount: UnstakeInstructionDataArgs['amount'];
  expectedRewardRate: UnstakeInstructionDataArgs['expectedRewardRate'];
};

export function getUnstakeInstruction<
  TAccountPool extends string,
  TAccountStakeAccount extends string,
  TAccountOwner extends string,
  TAccountUserTokenAccount extends string,
  TAccountStakeVault extends string,
  TAccountStakeMint extends string,
  TAccountTokenProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends Address = typeof STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: UnstakeInput<
    TAccountPool,
    TAccountStakeAccount,
    TAccountOwner,
    TAccountUserTokenAccount,
    TAccountStakeVault,
    TAccountStakeMint,
    TAccountTokenProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): UnstakeInstruction<
  TProgramAddress,
  TAccountPool,
  TAccountStakeAccount,
  TAccountOwner,
  TAccountUserTokenAccount,
  TAccountStakeVault,
  TAccountStakeMint,
  TAccountTokenProgram,
  TAccountClock
> {
  // Program address.
  const programAddress = config?.programAddress ?? STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: true },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    userTokenAccount: {
      value: input.userTokenAccount ?? null,
      isWritable: true,
    },
    stakeVault: { value: input.stakeVault ?? null, isWritable: true },
    stakeMint: { value: input.stakeMint ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.userTokenAccount),
      getAccountMeta(accounts.stakeVault),
      getAccountMeta(accounts.stakeMint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.clock),
    ],
    data: getUnstakeInstructionDataEncoder().encode(
      args as UnstakeInstructionDataArgs
    ),
    programAddress,
  } as UnstakeInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountStakeAccount,
    TAccountOwner,
    TAccountUserTokenAccount,
    TAccountStakeVault,
    TAccountStakeMint,
    TAccountTokenProgram,
    TAccountClock
  >);
}

export type ParsedUnstakeInstruction<
  TProgram extends string = typeof STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The stake pool */
    pool: TAccountMetas[0];
    /** The user's stake account */
    stakeAccount: TAccountMetas[1];
    /** The stake account owner */
    owner: TAccountMetas[2];
    /** User's token account */
    userTokenAccount: TAccountMetas[3];
    /** Pool's stake vault */
    stakeVault: TAccountMetas[4];
    /** The token mint being staked */
    stakeMint: TAccountMetas[5];
    /** The token program */
    tokenProgram: TAccountMetas[6];
    /** Clock sysvar */
    clock: TAccountMetas[7];
  };
  data: UnstakeInstructionData;
};

export function parseUnstakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUnstakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pool: getNextAccount(),
      stakeAccount: getNextAccount(),
      owner: getNextAccount(),
      userTokenAccount: getNextAccount(),
      stakeVault: getNextAccount(),
      stakeMint: getNextAccount(),
      tokenProgram: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getUnstakeInstructionDataDecoder().decode(instruction.data),
  };
}
