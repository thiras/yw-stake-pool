/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ACCEPT_AUTHORITY_DISCRIMINATOR = 8;

export function getAcceptAuthorityDiscriminatorBytes() {
  return getU8Encoder().encode(ACCEPT_AUTHORITY_DISCRIMINATOR);
}

export type AcceptAuthorityInstruction<
  TProgram extends string = typeof STAKE_POOL_PROGRAM_ADDRESS,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountPendingAuthority extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountPendingAuthority extends string
        ? ReadonlySignerAccount<TAccountPendingAuthority> &
            AccountSignerMeta<TAccountPendingAuthority>
        : TAccountPendingAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type AcceptAuthorityInstructionData = { discriminator: number };

export type AcceptAuthorityInstructionDataArgs = {};

export function getAcceptAuthorityInstructionDataEncoder(): FixedSizeEncoder<AcceptAuthorityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: ACCEPT_AUTHORITY_DISCRIMINATOR })
  );
}

export function getAcceptAuthorityInstructionDataDecoder(): FixedSizeDecoder<AcceptAuthorityInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getAcceptAuthorityInstructionDataCodec(): FixedSizeCodec<
  AcceptAuthorityInstructionDataArgs,
  AcceptAuthorityInstructionData
> {
  return combineCodec(
    getAcceptAuthorityInstructionDataEncoder(),
    getAcceptAuthorityInstructionDataDecoder()
  );
}

export type AcceptAuthorityInput<
  TAccountPool extends string = string,
  TAccountPendingAuthority extends string = string,
> = {
  /** The stake pool */
  pool: Address<TAccountPool>;
  /** The pending authority accepting the transfer */
  pendingAuthority: TransactionSigner<TAccountPendingAuthority>;
};

export function getAcceptAuthorityInstruction<
  TAccountPool extends string,
  TAccountPendingAuthority extends string,
  TProgramAddress extends Address = typeof STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: AcceptAuthorityInput<TAccountPool, TAccountPendingAuthority>,
  config?: { programAddress?: TProgramAddress }
): AcceptAuthorityInstruction<
  TProgramAddress,
  TAccountPool,
  TAccountPendingAuthority
> {
  // Program address.
  const programAddress = config?.programAddress ?? STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: true },
    pendingAuthority: {
      value: input.pendingAuthority ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.pendingAuthority),
    ],
    data: getAcceptAuthorityInstructionDataEncoder().encode({}),
    programAddress,
  } as AcceptAuthorityInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountPendingAuthority
  >);
}

export type ParsedAcceptAuthorityInstruction<
  TProgram extends string = typeof STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The stake pool */
    pool: TAccountMetas[0];
    /** The pending authority accepting the transfer */
    pendingAuthority: TAccountMetas[1];
  };
  data: AcceptAuthorityInstructionData;
};

export function parseAcceptAuthorityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAcceptAuthorityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { pool: getNextAccount(), pendingAuthority: getNextAccount() },
    data: getAcceptAuthorityInstructionDataDecoder().decode(instruction.data),
  };
}
