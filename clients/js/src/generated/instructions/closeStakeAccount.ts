/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLOSE_STAKE_ACCOUNT_DISCRIMINATOR = 9;

export function getCloseStakeAccountDiscriminatorBytes() {
  return getU8Encoder().encode(CLOSE_STAKE_ACCOUNT_DISCRIMINATOR);
}

export type CloseStakeAccountInstruction<
  TProgram extends string = typeof STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakeAccount extends string | AccountMeta<string> = string,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountReceiver extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStakeAccount extends string
        ? WritableAccount<TAccountStakeAccount>
        : TAccountStakeAccount,
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountReceiver extends string
        ? WritableAccount<TAccountReceiver>
        : TAccountReceiver,
      ...TRemainingAccounts,
    ]
  >;

export type CloseStakeAccountInstructionData = { discriminator: number };

export type CloseStakeAccountInstructionDataArgs = {};

export function getCloseStakeAccountInstructionDataEncoder(): FixedSizeEncoder<CloseStakeAccountInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: CLOSE_STAKE_ACCOUNT_DISCRIMINATOR })
  );
}

export function getCloseStakeAccountInstructionDataDecoder(): FixedSizeDecoder<CloseStakeAccountInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getCloseStakeAccountInstructionDataCodec(): FixedSizeCodec<
  CloseStakeAccountInstructionDataArgs,
  CloseStakeAccountInstructionData
> {
  return combineCodec(
    getCloseStakeAccountInstructionDataEncoder(),
    getCloseStakeAccountInstructionDataDecoder()
  );
}

export type CloseStakeAccountInput<
  TAccountStakeAccount extends string = string,
  TAccountOwner extends string = string,
  TAccountReceiver extends string = string,
> = {
  /** The stake account to close */
  stakeAccount: Address<TAccountStakeAccount>;
  /** The stake account owner */
  owner: TransactionSigner<TAccountOwner>;
  /** Account to receive the rent lamports */
  receiver: Address<TAccountReceiver>;
};

export function getCloseStakeAccountInstruction<
  TAccountStakeAccount extends string,
  TAccountOwner extends string,
  TAccountReceiver extends string,
  TProgramAddress extends Address = typeof STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: CloseStakeAccountInput<
    TAccountStakeAccount,
    TAccountOwner,
    TAccountReceiver
  >,
  config?: { programAddress?: TProgramAddress }
): CloseStakeAccountInstruction<
  TProgramAddress,
  TAccountStakeAccount,
  TAccountOwner,
  TAccountReceiver
> {
  // Program address.
  const programAddress = config?.programAddress ?? STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    receiver: { value: input.receiver ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.receiver),
    ],
    data: getCloseStakeAccountInstructionDataEncoder().encode({}),
    programAddress,
  } as CloseStakeAccountInstruction<
    TProgramAddress,
    TAccountStakeAccount,
    TAccountOwner,
    TAccountReceiver
  >);
}

export type ParsedCloseStakeAccountInstruction<
  TProgram extends string = typeof STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The stake account to close */
    stakeAccount: TAccountMetas[0];
    /** The stake account owner */
    owner: TAccountMetas[1];
    /** Account to receive the rent lamports */
    receiver: TAccountMetas[2];
  };
  data: CloseStakeAccountInstructionData;
};

export function parseCloseStakeAccountInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCloseStakeAccountInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakeAccount: getNextAccount(),
      owner: getNextAccount(),
      receiver: getNextAccount(),
    },
    data: getCloseStakeAccountInstructionDataDecoder().decode(instruction.data),
  };
}
