/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_POOL_DISCRIMINATOR = 0;

export function getInitializePoolDiscriminatorBytes() {
  return getU8Encoder().encode(INITIALIZE_POOL_DISCRIMINATOR);
}

export type InitializePoolInstruction<
  TProgram extends string = typeof STAKE_POOL_PROGRAM_ADDRESS,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountStakeMint extends string | AccountMeta<string> = string,
  TAccountRewardMint extends string | AccountMeta<string> = string,
  TAccountStakeVault extends string | AccountMeta<string> = string,
  TAccountRewardVault extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountStakeMint extends string
        ? ReadonlyAccount<TAccountStakeMint>
        : TAccountStakeMint,
      TAccountRewardMint extends string
        ? ReadonlyAccount<TAccountRewardMint>
        : TAccountRewardMint,
      TAccountStakeVault extends string
        ? WritableAccount<TAccountStakeVault>
        : TAccountStakeVault,
      TAccountRewardVault extends string
        ? WritableAccount<TAccountRewardVault>
        : TAccountRewardVault,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type InitializePoolInstructionData = {
  discriminator: number;
  rewardRatePerSecond: bigint;
  minStakeAmount: bigint;
  endTime: bigint;
  minWithdrawPeriod: bigint;
  minRewardPeriod: bigint;
};

export type InitializePoolInstructionDataArgs = {
  rewardRatePerSecond: number | bigint;
  minStakeAmount: number | bigint;
  endTime: number | bigint;
  minWithdrawPeriod: number | bigint;
  minRewardPeriod: number | bigint;
};

export function getInitializePoolInstructionDataEncoder(): FixedSizeEncoder<InitializePoolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['rewardRatePerSecond', getU64Encoder()],
      ['minStakeAmount', getU64Encoder()],
      ['endTime', getI64Encoder()],
      ['minWithdrawPeriod', getI64Encoder()],
      ['minRewardPeriod', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_POOL_DISCRIMINATOR })
  );
}

export function getInitializePoolInstructionDataDecoder(): FixedSizeDecoder<InitializePoolInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['rewardRatePerSecond', getU64Decoder()],
    ['minStakeAmount', getU64Decoder()],
    ['endTime', getI64Decoder()],
    ['minWithdrawPeriod', getI64Decoder()],
    ['minRewardPeriod', getI64Decoder()],
  ]);
}

export function getInitializePoolInstructionDataCodec(): FixedSizeCodec<
  InitializePoolInstructionDataArgs,
  InitializePoolInstructionData
> {
  return combineCodec(
    getInitializePoolInstructionDataEncoder(),
    getInitializePoolInstructionDataDecoder()
  );
}

export type InitializePoolInput<
  TAccountPool extends string = string,
  TAccountAuthority extends string = string,
  TAccountStakeMint extends string = string,
  TAccountRewardMint extends string = string,
  TAccountStakeVault extends string = string,
  TAccountRewardVault extends string = string,
  TAccountPayer extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  /** The stake pool PDA */
  pool: Address<TAccountPool>;
  /** The pool authority */
  authority: TransactionSigner<TAccountAuthority>;
  /** The token mint being staked */
  stakeMint: Address<TAccountStakeMint>;
  /** The reward token mint */
  rewardMint: Address<TAccountRewardMint>;
  /** The pool's stake token vault */
  stakeVault: Address<TAccountStakeVault>;
  /** The pool's reward token vault */
  rewardVault: Address<TAccountRewardVault>;
  /** The account paying for rent */
  payer: TransactionSigner<TAccountPayer>;
  /** The token program */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** The system program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Rent sysvar */
  rent?: Address<TAccountRent>;
  rewardRatePerSecond: InitializePoolInstructionDataArgs['rewardRatePerSecond'];
  minStakeAmount: InitializePoolInstructionDataArgs['minStakeAmount'];
  endTime: InitializePoolInstructionDataArgs['endTime'];
  minWithdrawPeriod: InitializePoolInstructionDataArgs['minWithdrawPeriod'];
  minRewardPeriod: InitializePoolInstructionDataArgs['minRewardPeriod'];
};

export function getInitializePoolInstruction<
  TAccountPool extends string,
  TAccountAuthority extends string,
  TAccountStakeMint extends string,
  TAccountRewardMint extends string,
  TAccountStakeVault extends string,
  TAccountRewardVault extends string,
  TAccountPayer extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: InitializePoolInput<
    TAccountPool,
    TAccountAuthority,
    TAccountStakeMint,
    TAccountRewardMint,
    TAccountStakeVault,
    TAccountRewardVault,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): InitializePoolInstruction<
  TProgramAddress,
  TAccountPool,
  TAccountAuthority,
  TAccountStakeMint,
  TAccountRewardMint,
  TAccountStakeVault,
  TAccountRewardVault,
  TAccountPayer,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    stakeMint: { value: input.stakeMint ?? null, isWritable: false },
    rewardMint: { value: input.rewardMint ?? null, isWritable: false },
    stakeVault: { value: input.stakeVault ?? null, isWritable: true },
    rewardVault: { value: input.rewardVault ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.stakeMint),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.stakeVault),
      getAccountMeta(accounts.rewardVault),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getInitializePoolInstructionDataEncoder().encode(
      args as InitializePoolInstructionDataArgs
    ),
    programAddress,
  } as InitializePoolInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountAuthority,
    TAccountStakeMint,
    TAccountRewardMint,
    TAccountStakeVault,
    TAccountRewardVault,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >);
}

export type ParsedInitializePoolInstruction<
  TProgram extends string = typeof STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The stake pool PDA */
    pool: TAccountMetas[0];
    /** The pool authority */
    authority: TAccountMetas[1];
    /** The token mint being staked */
    stakeMint: TAccountMetas[2];
    /** The reward token mint */
    rewardMint: TAccountMetas[3];
    /** The pool's stake token vault */
    stakeVault: TAccountMetas[4];
    /** The pool's reward token vault */
    rewardVault: TAccountMetas[5];
    /** The account paying for rent */
    payer: TAccountMetas[6];
    /** The token program */
    tokenProgram: TAccountMetas[7];
    /** The system program */
    systemProgram: TAccountMetas[8];
    /** Rent sysvar */
    rent: TAccountMetas[9];
  };
  data: InitializePoolInstructionData;
};

export function parseInitializePoolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializePoolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pool: getNextAccount(),
      authority: getNextAccount(),
      stakeMint: getNextAccount(),
      rewardMint: getNextAccount(),
      stakeVault: getNextAccount(),
      rewardVault: getNextAccount(),
      payer: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getInitializePoolInstructionDataDecoder().decode(instruction.data),
  };
}
