/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_STAKE_ACCOUNT_DISCRIMINATOR = 1;

export function getInitializeStakeAccountDiscriminatorBytes() {
  return getU8Encoder().encode(INITIALIZE_STAKE_ACCOUNT_DISCRIMINATOR);
}

export type InitializeStakeAccountInstruction<
  TProgram extends string = typeof STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakeAccount extends string | AccountMeta<string> = string,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStakeAccount extends string
        ? WritableAccount<TAccountStakeAccount>
        : TAccountStakeAccount,
      TAccountPool extends string
        ? ReadonlyAccount<TAccountPool>
        : TAccountPool,
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeStakeAccountInstructionData = {
  discriminator: number;
  index: bigint;
};

export type InitializeStakeAccountInstructionDataArgs = {
  index: number | bigint;
};

export function getInitializeStakeAccountInstructionDataEncoder(): FixedSizeEncoder<InitializeStakeAccountInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['index', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_STAKE_ACCOUNT_DISCRIMINATOR,
    })
  );
}

export function getInitializeStakeAccountInstructionDataDecoder(): FixedSizeDecoder<InitializeStakeAccountInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['index', getU64Decoder()],
  ]);
}

export function getInitializeStakeAccountInstructionDataCodec(): FixedSizeCodec<
  InitializeStakeAccountInstructionDataArgs,
  InitializeStakeAccountInstructionData
> {
  return combineCodec(
    getInitializeStakeAccountInstructionDataEncoder(),
    getInitializeStakeAccountInstructionDataDecoder()
  );
}

export type InitializeStakeAccountInput<
  TAccountStakeAccount extends string = string,
  TAccountPool extends string = string,
  TAccountOwner extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The stake account PDA */
  stakeAccount: Address<TAccountStakeAccount>;
  /** The stake pool */
  pool: Address<TAccountPool>;
  /** The stake account owner */
  owner: TransactionSigner<TAccountOwner>;
  /** The account paying for rent */
  payer: TransactionSigner<TAccountPayer>;
  /** The system program */
  systemProgram?: Address<TAccountSystemProgram>;
  index: InitializeStakeAccountInstructionDataArgs['index'];
};

export function getInitializeStakeAccountInstruction<
  TAccountStakeAccount extends string,
  TAccountPool extends string,
  TAccountOwner extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: InitializeStakeAccountInput<
    TAccountStakeAccount,
    TAccountPool,
    TAccountOwner,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeStakeAccountInstruction<
  TProgramAddress,
  TAccountStakeAccount,
  TAccountPool,
  TAccountOwner,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    pool: { value: input.pool ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeStakeAccountInstructionDataEncoder().encode(
      args as InitializeStakeAccountInstructionDataArgs
    ),
    programAddress,
  } as InitializeStakeAccountInstruction<
    TProgramAddress,
    TAccountStakeAccount,
    TAccountPool,
    TAccountOwner,
    TAccountPayer,
    TAccountSystemProgram
  >);
}

export type ParsedInitializeStakeAccountInstruction<
  TProgram extends string = typeof STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The stake account PDA */
    stakeAccount: TAccountMetas[0];
    /** The stake pool */
    pool: TAccountMetas[1];
    /** The stake account owner */
    owner: TAccountMetas[2];
    /** The account paying for rent */
    payer: TAccountMetas[3];
    /** The system program */
    systemProgram: TAccountMetas[4];
  };
  data: InitializeStakeAccountInstructionData;
};

export function parseInitializeStakeAccountInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeStakeAccountInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakeAccount: getNextAccount(),
      pool: getNextAccount(),
      owner: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeStakeAccountInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
