/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';
import { getKeyDecoder, getKeyEncoder, type Key, type KeyArgs } from '../types';

export type StakeAccount = {
  key: Key;
  pool: Address;
  owner: Address;
  index: bigint;
  amountStaked: bigint;
  rewardPerTokenPaid: bigint;
  rewardsEarned: bigint;
  stakeTimestamp: bigint;
  bump: number;
};

export type StakeAccountArgs = {
  key: KeyArgs;
  pool: Address;
  owner: Address;
  index: number | bigint;
  amountStaked: number | bigint;
  rewardPerTokenPaid: number | bigint;
  rewardsEarned: number | bigint;
  stakeTimestamp: number | bigint;
  bump: number;
};

export function getStakeAccountEncoder(): FixedSizeEncoder<StakeAccountArgs> {
  return getStructEncoder([
    ['key', getKeyEncoder()],
    ['pool', getAddressEncoder()],
    ['owner', getAddressEncoder()],
    ['index', getU64Encoder()],
    ['amountStaked', getU64Encoder()],
    ['rewardPerTokenPaid', getU128Encoder()],
    ['rewardsEarned', getU64Encoder()],
    ['stakeTimestamp', getI64Encoder()],
    ['bump', getU8Encoder()],
  ]);
}

export function getStakeAccountDecoder(): FixedSizeDecoder<StakeAccount> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['pool', getAddressDecoder()],
    ['owner', getAddressDecoder()],
    ['index', getU64Decoder()],
    ['amountStaked', getU64Decoder()],
    ['rewardPerTokenPaid', getU128Decoder()],
    ['rewardsEarned', getU64Decoder()],
    ['stakeTimestamp', getI64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getStakeAccountCodec(): FixedSizeCodec<
  StakeAccountArgs,
  StakeAccount
> {
  return combineCodec(getStakeAccountEncoder(), getStakeAccountDecoder());
}

export function decodeStakeAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<StakeAccount, TAddress>;
export function decodeStakeAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<StakeAccount, TAddress>;
export function decodeStakeAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<StakeAccount, TAddress> | MaybeAccount<StakeAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getStakeAccountDecoder()
  );
}

export async function fetchStakeAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<StakeAccount, TAddress>> {
  const maybeAccount = await fetchMaybeStakeAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeStakeAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<StakeAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeStakeAccount(maybeAccount);
}

export async function fetchAllStakeAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<StakeAccount>[]> {
  const maybeAccounts = await fetchAllMaybeStakeAccount(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeStakeAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<StakeAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeStakeAccount(maybeAccount));
}

export function getStakeAccountSize(): number {
  return 114;
}
