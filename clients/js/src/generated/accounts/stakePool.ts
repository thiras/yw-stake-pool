/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';
import { getKeyDecoder, getKeyEncoder, type Key, type KeyArgs } from '../types';

export type StakePool = {
  key: Key;
  authority: Address;
  stakeMint: Address;
  rewardMint: Address;
  stakeVault: Address;
  rewardVault: Address;
  totalStaked: bigint;
  rewardRate: bigint;
  minStakeAmount: bigint;
  lockupPeriod: bigint;
  isPaused: boolean;
  bump: number;
};

export type StakePoolArgs = {
  key: KeyArgs;
  authority: Address;
  stakeMint: Address;
  rewardMint: Address;
  stakeVault: Address;
  rewardVault: Address;
  totalStaked: number | bigint;
  rewardRate: number | bigint;
  minStakeAmount: number | bigint;
  lockupPeriod: number | bigint;
  isPaused: boolean;
  bump: number;
};

export function getStakePoolEncoder(): FixedSizeEncoder<StakePoolArgs> {
  return getStructEncoder([
    ['key', getKeyEncoder()],
    ['authority', getAddressEncoder()],
    ['stakeMint', getAddressEncoder()],
    ['rewardMint', getAddressEncoder()],
    ['stakeVault', getAddressEncoder()],
    ['rewardVault', getAddressEncoder()],
    ['totalStaked', getU64Encoder()],
    ['rewardRate', getU64Encoder()],
    ['minStakeAmount', getU64Encoder()],
    ['lockupPeriod', getI64Encoder()],
    ['isPaused', getBooleanEncoder()],
    ['bump', getU8Encoder()],
  ]);
}

export function getStakePoolDecoder(): FixedSizeDecoder<StakePool> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['authority', getAddressDecoder()],
    ['stakeMint', getAddressDecoder()],
    ['rewardMint', getAddressDecoder()],
    ['stakeVault', getAddressDecoder()],
    ['rewardVault', getAddressDecoder()],
    ['totalStaked', getU64Decoder()],
    ['rewardRate', getU64Decoder()],
    ['minStakeAmount', getU64Decoder()],
    ['lockupPeriod', getI64Decoder()],
    ['isPaused', getBooleanDecoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getStakePoolCodec(): FixedSizeCodec<StakePoolArgs, StakePool> {
  return combineCodec(getStakePoolEncoder(), getStakePoolDecoder());
}

export function decodeStakePool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<StakePool, TAddress>;
export function decodeStakePool<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<StakePool, TAddress>;
export function decodeStakePool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<StakePool, TAddress> | MaybeAccount<StakePool, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getStakePoolDecoder()
  );
}

export async function fetchStakePool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<StakePool, TAddress>> {
  const maybeAccount = await fetchMaybeStakePool(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeStakePool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<StakePool, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeStakePool(maybeAccount);
}

export async function fetchAllStakePool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<StakePool>[]> {
  const maybeAccounts = await fetchAllMaybeStakePool(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeStakePool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<StakePool>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeStakePool(maybeAccount));
}

export function getStakePoolSize(): number {
  return 195;
}
