name: Main

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  format_and_lint_programs:
    name: Format & Lint Programs
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          clippy: true
          rustfmt: true

      - name: Format Programs
        run: pnpm programs:format

      - name: Lint Programs
        run: pnpm programs:lint

  format_and_lint_client_js:
    name: Format & Lint Client JS
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup

      - name: Format Client JS
        run: pnpm clients:js:format

      - name: Lint Client JS
        run: pnpm clients:js:lint


  build_programs:
    name: Build programs
    runs-on: ubuntu-latest
    needs: format_and_lint_programs
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          cargo-cache-key: cargo-programs
          solana: true

      - name: Build Programs
        run: pnpm programs:build

      - name: Upload Program Builds
        uses: actions/upload-artifact@v4
        with:
          name: program-builds
          path: ./target/deploy/*.so
          if-no-files-found: error

      - name: Save Client Artifacts
        uses: actions/cache/save@v4
        with:
          path: |
            ./**/*.so
            ./target/deploy/*.json
          key: ${{ runner.os }}-builds-${{ github.sha }}

      - name: Save Build Target Directory
        uses: actions/cache/save@v4
        with:
          path: target/
          key: ${{ runner.os }}-cargo-build-target-${{ github.sha }}

  test_programs:
    name: Test Programs
    runs-on: ubuntu-latest
    needs: build_programs
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Restore Build Target Directory
        uses: actions/cache/restore@v4
        with:
          path: target/
          key: ${{ runner.os }}-cargo-build-target-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-target-

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          cargo-cache-key: cargo-program-tests
          cargo-cache-fallback-key: cargo-programs
          solana: true

      - name: Cache SPL Token 2022 Program
        id: cache-spl-token
        uses: actions/cache@v4
        with:
          path: /tmp/spl_token_2022.so
          key: ${{ runner.os }}-spl-token-2022-${{ hashFiles('program/tests/spl_token_tests.rs') }}
          restore-keys: |
            ${{ runner.os }}-spl-token-2022-

      - name: Download SPL Token 2022 Program
        if: steps.cache-spl-token.outputs.cache-hit != 'true'
        run: |
          echo "📦 Downloading SPL Token 2022 program..."
          solana program dump TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb /tmp/spl_token_2022.so
          ls -lh /tmp/spl_token_2022.so
          echo "✅ SPL Token 2022 program downloaded and cached"

      - name: Test Programs
        run: pnpm programs:test

  security_scan_xray:
    name: Security Scan (X-ray)
    runs-on: ubuntu-latest
    needs: build_programs
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Restore Program Builds
        uses: actions/cache/restore@v4
        with:
          path: |
            ./**/*.so
            ./target/deploy/*.json
          key: ${{ runner.os }}-builds-${{ github.sha }}

      - name: Run Sec3 X-ray Security Scan
        run: |
          docker run --rm \
            -v "$(pwd):/workspace" \
            ghcr.io/sec3-product/x-ray:latest \
            /workspace/program 2>&1 | tee xray-output.txt

      - name: Generate Step Summary
        if: always()
        run: |
          echo "# 🔍 X-ray Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if vulnerabilities were found
          if grep -q "VULNERABLE" xray-output.txt 2>/dev/null; then
            echo "## ⚠️ Status: Vulnerabilities Detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Scan Output:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat xray-output.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "## ✅ Status: No Vulnerabilities Detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The X-ray security scan completed successfully with no vulnerabilities found." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Scan Output:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat xray-output.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check for Vulnerabilities
        run: |
          # Check for vulnerabilities and create warnings instead of failing
          if grep -q "VULNERABLE" xray-output.txt 2>/dev/null; then
            echo "::warning file=.github/workflows/main.yml,title=X-ray Security Scan::Security vulnerabilities detected by X-ray. Please review the findings in the step summary or download the full report."
            echo "⚠️ Security vulnerabilities detected by X-ray!"
          else
            echo "✅ No vulnerabilities detected"
          fi

      - name: Upload X-ray Security Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xray-security-report
          path: xray-output.txt
          retention-days: 90

  security_scan_solazy:
    name: Security Scan (sol-azy)
    runs-on: ubuntu-latest
    needs: build_programs
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Restore Program Builds
        uses: actions/cache/restore@v4
        with:
          path: |
            ./**/*.so
            ./target/deploy/*.json
          key: ${{ runner.os }}-builds-${{ github.sha }}

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Cache sol-azy
        id: cache-solazy
        uses: actions/cache@v4
        with:
          path: /tmp/sol-azy
          key: ${{ runner.os }}-solazy-${{ hashFiles('.github/workflows/main.yml') }}
          restore-keys: |
            ${{ runner.os }}-solazy-

      - name: Install sol-azy
        if: steps.cache-solazy.outputs.cache-hit != 'true'
        run: |
          rm -rf /tmp/sol-azy
          git clone https://github.com/FuzzingLabs/sol-azy.git /tmp/sol-azy
          cd /tmp/sol-azy
          # Build with warnings allowed (the project has a known lifetime warning)
          RUSTFLAGS="-A warnings" cargo build --release

      - name: Add sol-azy to PATH
        run: echo "/tmp/sol-azy/target/release" >> $GITHUB_PATH

      - name: Run sol-azy Static Analysis
        continue-on-error: true
        run: |
          # Run static analysis on the program
          /tmp/sol-azy/target/release/sol-azy sast --target-dir ./program --rules-dir /tmp/sol-azy/rules 2>&1 | tee solazy-output.txt || true

      - name: Run sol-azy Reverse Engineering
        continue-on-error: true
        run: |
          # Run reverse engineering on compiled binaries
          for so_file in ./target/deploy/*.so; do
            if [ -f "$so_file" ]; then
              echo "Analyzing: $so_file" | tee -a solazy-reverse.txt
              /tmp/sol-azy/target/release/sol-azy reverse \
                --mode both \
                --bytecodes-file "$so_file" \
                --out-dir ./solazy-output \
                --labeling \
                --reduced 2>&1 | tee -a solazy-reverse.txt || true
              echo "---" | tee -a solazy-reverse.txt
            fi
          done

      - name: Generate Step Summary
        if: always()
        run: |
          echo "# 🔬 sol-azy Static Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Analysis Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # SAST Results
          if [ -f solazy-output.txt ]; then
            echo "## 📊 Static Analysis (SAST)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Count findings by severity
            TOTAL_FINDINGS=0
            if grep -q "Total Matches" solazy-output.txt 2>/dev/null; then
              # Extract total matches from the table, excluding 0 matches
              TOTAL_FINDINGS=$(grep -E "│.*│.*│.*│.*│\s+[1-9][0-9]*\s+│" solazy-output.txt | wc -l)
            fi
            
            # Check for issues
            if [ "$TOTAL_FINDINGS" -gt 0 ]; then
              echo "### ⚠️ Security Issues Detected: $TOTAL_FINDINGS finding(s)" >> $GITHUB_STEP_SUMMARY
            else
              echo "### ✅ No Security Issues Found" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat solazy-output.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Reverse Engineering Results
          if [ -f solazy-reverse.txt ]; then
            echo "## 🔍 Reverse Engineering Analysis" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Disassembly and analysis of compiled binaries:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -n 200 solazy-reverse.txt >> $GITHUB_STEP_SUMMARY
            if [ $(wc -l < solazy-reverse.txt) -gt 200 ]; then
              echo "... (output truncated, see artifact for full report)" >> $GITHUB_STEP_SUMMARY
            fi
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check for Security Findings
        run: |
          # Parse the sol-azy output and create warnings instead of failing
          if [ -f solazy-output.txt ]; then
            # Count findings (matches > 0)
            TOTAL_FINDINGS=$(grep -E "│.*│.*│.*│.*│\s+[1-9][0-9]*\s+│" solazy-output.txt | wc -l)
            
            if [ "$TOTAL_FINDINGS" -gt 0 ]; then
              echo "::warning file=.github/workflows/main.yml,title=sol-azy Static Analysis::sol-azy detected $TOTAL_FINDINGS security finding(s). Please review the findings in the step summary or download the full report."
              echo "⚠️ sol-azy detected $TOTAL_FINDINGS security finding(s)!"
              
              # Extract and output individual findings as warnings
              while IFS= read -r line; do
                if [[ $line =~ \│[[:space:]]*([^│]+)[[:space:]]*\│[[:space:]]*(Medium|High|Critical|Low) ]]; then
                  rule_name="${BASH_REMATCH[1]}"
                  severity="${BASH_REMATCH[2]}"
                  echo "::warning title=sol-azy: $rule_name ($severity)::Security finding detected. See step summary for details."
                fi
              done < <(grep -E "│.*│\s+(Medium|High|Critical|Low)\s+│" solazy-output.txt | grep -E "\s+[1-9][0-9]*\s+│")
            else
              echo "✅ No security findings detected by sol-azy"
            fi
          else
            echo "::warning file=.github/workflows/main.yml,title=sol-azy Static Analysis::sol-azy output file not found"
            echo "⚠️ Warning: sol-azy output file not found"
          fi

      - name: Upload sol-azy Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: solazy-analysis-reports
          path: |
            solazy-output.txt
            solazy-reverse.txt
            solazy-output/
          retention-days: 90

  generate_idls:
    name: Check IDL Generation
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          cargo-cache-key: cargo-programs
          cargo-cache-local-key: cargo-local

      - name: Generate IDLs
        run: pnpm generate:idls

      - name: Check Working Directory
        run: |
          git status --porcelain
          test -z "$(git status --porcelain)"

  generate_clients:
    name: Check Client Generation
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          rustfmt: true

      - name: Generate Clients
        run: pnpm generate:clients

      - name: Check Working Directory
        run: |
          git status --porcelain
          test -z "$(git status --porcelain)"

  test_client_js:
    name: Test Client JS
    runs-on: ubuntu-latest
    needs: build_programs
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          solana: true

      - name: Restore Client Artifacts
        uses: actions/cache/restore@v4
        with:
          path: |
            ./**/*.so
            ./target/deploy/*.json
          key: ${{ runner.os }}-builds-${{ github.sha }}

      - name: Test Client JS
        run: pnpm clients:js:test

