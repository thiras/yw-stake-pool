name: Main

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  format_and_lint_programs:
    name: Format & Lint Programs
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          clippy: true
          rustfmt: true

      - name: Format Programs
        run: pnpm programs:format

      - name: Lint Programs
        run: pnpm programs:lint

  format_and_lint_client_js:
    name: Format & Lint Client JS
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup

      - name: Format Client JS
        run: pnpm clients:js:format

      - name: Lint Client JS
        run: pnpm clients:js:lint


  build_programs:
    name: Build programs
    runs-on: ubuntu-latest
    needs: format_and_lint_programs
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          cargo-cache-key: cargo-programs
          solana: true

      - name: Build Programs
        run: pnpm programs:build

      - name: Upload Program Builds
        uses: actions/upload-artifact@v4
        with:
          name: program-builds
          path: ./target/deploy/*.so
          if-no-files-found: error

      - name: Save Client Artifacts
        uses: actions/cache/save@v4
        with:
          path: |
            ./**/*.so
            ./target/deploy/*.json
          key: ${{ runner.os }}-builds-${{ github.sha }}

  test_programs:
    name: Test Programs
    runs-on: ubuntu-latest
    needs: format_and_lint_programs
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          cargo-cache-key: cargo-program-tests
          cargo-cache-fallback-key: cargo-programs
          solana: true

      - name: Test Programs
        run: pnpm programs:test

  security_scan_xray:
    name: Security Scan (X-ray)
    runs-on: ubuntu-latest
    needs: build_programs
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Restore Program Builds
        uses: actions/cache/restore@v4
        with:
          path: |
            ./**/*.so
            ./target/deploy/*.json
          key: ${{ runner.os }}-builds-${{ github.sha }}

      - name: Run Sec3 X-ray Security Scan
        run: |
          docker run --rm \
            -v "$(pwd):/workspace" \
            ghcr.io/sec3-product/x-ray:latest \
            /workspace/program 2>&1 | tee xray-output.txt

      - name: Generate Step Summary
        if: always()
        run: |
          echo "# üîç X-ray Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if vulnerabilities were found
          if grep -q "VULNERABLE" xray-output.txt 2>/dev/null; then
            echo "## ‚ùå Status: Vulnerabilities Detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Scan Output:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat xray-output.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚úÖ Status: No Vulnerabilities Detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The X-ray security scan completed successfully with no vulnerabilities found." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Scan Output:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat xray-output.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check for Vulnerabilities
        run: |
          # Fail the job if vulnerabilities are found
          if grep -q "VULNERABLE" xray-output.txt; then
            echo "‚ùå Security vulnerabilities detected by X-ray!"
            exit 1
          else
            echo "‚úÖ No vulnerabilities detected"
          fi

      - name: Upload X-ray Security Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xray-security-report
          path: xray-output.txt
          retention-days: 90

  generate_idls:
    name: Check IDL Generation
    runs-on: ubuntu-latest
    needs: format_and_lint_programs
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          cargo-cache-key: cargo-programs
          cargo-cache-local-key: cargo-local

      - name: Generate IDLs
        run: pnpm generate:idls

      - name: Check Working Directory
        run: |
          git status --porcelain
          test -z "$(git status --porcelain)"

  generate_clients:
    name: Check Client Generation
    runs-on: ubuntu-latest
    needs: format_and_lint_programs
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          rustfmt: true

      - name: Generate Clients
        run: pnpm generate:clients

      - name: Check Working Directory
        run: |
          git status --porcelain
          test -z "$(git status --porcelain)"

  test_client_js:
    name: Test Client JS
    runs-on: ubuntu-latest
    needs: build_programs
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          solana: true

      - name: Restore Client Artifacts
        uses: actions/cache/restore@v4
        with:
          path: |
            ./**/*.so
            ./target/deploy/*.json
          key: ${{ runner.os }}-builds-${{ github.sha }}

      - name: Test Client JS
        run: pnpm clients:js:test

